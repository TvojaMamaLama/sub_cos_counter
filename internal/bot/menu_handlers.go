package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"sub-cos-counter/internal/models"

	"gopkg.in/telebot.v3"
)

func (b *Bot) handleMySubscriptions(c telebot.Context) error {
	ctx := context.Background()
	subscriptions, err := b.subscriptionService.GetAllActiveSubscriptions(ctx)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: %v", err))
	}

	if len(subscriptions) == 0 {
		return c.Edit("üìã *–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", &telebot.ReplyMarkup{
			InlineKeyboard: [][]telebot.InlineButton{
				{btnAddSubscription},
				{btnBack},
			},
		}, telebot.ModeMarkdown)
	}

	text := "üìã *–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
	keyboard := [][]telebot.InlineButton{}

	for _, sub := range subscriptions {
		currencySymbol := "$"
		if sub.Currency == models.CurrencyRUB {
			currencySymbol = "‚ÇΩ"
		}

		status := ""
		if sub.IsPaymentDue() {
			status = " ‚ö†Ô∏è"
		}

		text += fmt.Sprintf("‚Ä¢ %s - %s%s%s\n  üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: %s\n\n",
			sub.Name, sub.Cost.String(), currencySymbol, status, sub.NextPayment.Format("02.01.2006"))

		// Create action buttons for each subscription
		payBtn := telebot.InlineButton{
			Unique: fmt.Sprintf("pay_%d", sub.ID),
			Text:   fmt.Sprintf("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å %s", sub.Name),
		}
		deleteBtn := telebot.InlineButton{
			Unique: fmt.Sprintf("delete_%d", sub.ID),
			Text:   fmt.Sprintf("‚ùå –£–¥–∞–ª–∏—Ç—å %s", sub.Name),
		}

		// Register handlers for these specific buttons
		b.bot.Handle(&payBtn, b.handlePaySubscription)
		b.bot.Handle(&deleteBtn, b.handleDeleteSubscription)

		keyboard = append(keyboard, []telebot.InlineButton{payBtn})
		keyboard = append(keyboard, []telebot.InlineButton{deleteBtn})
	}

	keyboard = append(keyboard, []telebot.InlineButton{btnBack})

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: keyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) handlePaySubscription(c telebot.Context) error {
	data := c.Data()
	idStr := strings.TrimPrefix(data, "pay_")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		return c.Send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–¥–ø–∏—Å–∫–∏")
	}

	ctx := context.Background()
	err = b.subscriptionService.MarkAsPaid(ctx, id)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ–± –æ–ø–ª–∞—Ç–µ: %v", err))
	}

	subscription, err := b.subscriptionService.GetSubscriptionByID(ctx, id)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
	}

	currencySymbol := "$"
	if subscription.Currency == models.CurrencyRUB {
		currencySymbol = "‚ÇΩ"
	}

	text := fmt.Sprintf("‚úÖ *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ—á–µ–Ω!*\n\n"+
		"üìù –ü–æ–¥–ø–∏—Å–∫–∞: %s\n"+
		"üí∞ –°—É–º–º–∞: %s%s\n"+
		"üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: %s",
		subscription.Name,
		subscription.Cost.String(), currencySymbol,
		subscription.NextPayment.Format("02.01.2006"))

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{
			{btnMySubscriptions},
			{btnBack},
		},
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleDeleteSubscription(c telebot.Context) error {
	data := c.Data()
	idStr := strings.TrimPrefix(data, "delete_")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		return c.Send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–¥–ø–∏—Å–∫–∏")
	}

	ctx := context.Background()
	subscription, err := b.subscriptionService.GetSubscriptionByID(ctx, id)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
	}

	err = b.subscriptionService.DeleteSubscription(ctx, id)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: %v", err))
	}

	text := fmt.Sprintf("üóëÔ∏è *–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞*\n\n"+
		"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n"+
		"–ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
		subscription.Name)

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{
			{btnMySubscriptions},
			{btnBack},
		},
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleMonthlyExpense(c telebot.Context) error {
	ctx := context.Background()

	// Get current month expenses
	currentExpenses, err := b.analyticsService.GetCurrentMonthExpense(ctx)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: %v", err))
	}

	// Get monthly recurring costs
	recurringCosts, err := b.analyticsService.GetMonthlyRecurringCost(ctx)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Å—è—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: %v", err))
	}

	text := "üí∞ *–ú–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã*\n\n"

	// Current month actual expenses
	text += "üìä *–û–ø–ª–∞—á–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:*\n"
	if len(currentExpenses) == 0 {
		text += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ\n\n"
	} else {
		for _, expense := range currentExpenses {
			currencySymbol := "$"
			if expense.Currency == models.CurrencyRUB {
				currencySymbol = "‚ÇΩ"
			}
			text += fmt.Sprintf("‚Ä¢ %s%s (%d –ø–ª–∞—Ç–µ–∂–µ–π)\n", expense.TotalAmount.String(), currencySymbol, expense.Count)
		}
		text += "\n"
	}

	// Monthly recurring costs
	text += "üîÑ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏):*\n"
	if len(recurringCosts) == 0 {
		text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
	} else {
		for currency, amount := range recurringCosts {
			currencySymbol := "$"
			if currency == models.CurrencyRUB {
				currencySymbol = "‚ÇΩ"
			}
			text += fmt.Sprintf("‚Ä¢ %s%s –≤ –º–µ—Å—è—Ü\n", amount.String(), currencySymbol)
		}
	}

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{
			{btnBack},
		},
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleAnalytics(c telebot.Context) error {
	ctx := context.Background()
	analytics, err := b.analyticsService.GetCurrentMonthCategoryAnalytics(ctx)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: %v", err))
	}

	text := "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*\n\n"

	if len(analytics) == 0 {
		text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
	} else {
		for category, summaries := range analytics {
			text += fmt.Sprintf("%s\n", getCategoryEmoji(category))
			for _, summary := range summaries {
				currencySymbol := "$"
				if summary.Currency == models.CurrencyRUB {
					currencySymbol = "‚ÇΩ"
				}
				text += fmt.Sprintf("  %s%s (%d –ø–ª–∞—Ç–µ–∂–µ–π)\n", summary.TotalAmount.String(), currencySymbol, summary.Count)
			}
			text += "\n"
		}
	}

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{
			{btnBack},
		},
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleHistory(c telebot.Context) error {
	ctx := context.Background()
	payments, err := b.analyticsService.GetPaymentHistory(ctx, 10) // Last 10 payments
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err))
	}

	text := "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"

	if len(payments) == 0 {
		text += "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞"
	} else {
		for _, payment := range payments {
			currencySymbol := "$"
			if payment.Currency == models.CurrencyRUB {
				currencySymbol = "‚ÇΩ"
			}

			statusIcon := "‚úÖ"
			switch payment.Status {
			case models.PaymentStatusPending:
				statusIcon = "‚è≥"
			case models.PaymentStatusFailed:
				statusIcon = "‚ùå"
			}

			text += fmt.Sprintf("%s %s%s - %s\n",
				statusIcon, payment.Amount.String(), currencySymbol, payment.PaidAt.Format("02.01.2006 15:04"))
		}
	}

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{
			{btnBack},
		},
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleSettings(c telebot.Context) error {
	text := "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n" +
		"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞–ª—é—Ç: USD, RUB\n" +
		"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö\n" +
		"‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n" +
		"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n\n" +
		"–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{
			{btnBack},
		},
	}, telebot.ModeMarkdown)
}

package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sub-cos-counter/internal/models"
	"time"

	"gopkg.in/telebot.v3"
)

func (b *Bot) setupDynamicHandlers() {
	// For now, let's not register a catch-all handler to avoid conflicts
	// We'll handle dynamic buttons differently
}

func (b *Bot) setupHandlers() {
	log.Println("DEBUG: Setting up handlers...")

	// Start command
	b.bot.Handle("/start", b.handleStart)

	// Main menu callbacks
	b.bot.Handle(&btnAddSubscription, b.handleAddSubscription)
	b.bot.Handle(&btnMySubscriptions, b.handleMySubscriptions)
	b.bot.Handle(&btnMonthlyExpense, b.handleMonthlyExpense)
	b.bot.Handle(&btnAnalytics, b.handleAnalytics)
	b.bot.Handle(&btnHistory, b.handleHistory)
	b.bot.Handle(&btnSettings, b.handleSettings)

	// Category selection callbacks
	log.Printf("DEBUG: Registering category handlers - Work: %s", btnCategoryWork.Unique)
	b.bot.Handle(&btnCategoryEntertainment, b.handleCategorySelection)
	b.bot.Handle(&btnCategoryWork, b.handleCategorySelection)
	b.bot.Handle(&btnCategoryEducation, b.handleCategorySelection)
	b.bot.Handle(&btnCategoryHome, b.handleCategorySelection)
	b.bot.Handle(&btnCategoryOther, b.handleCategorySelection)

	// Currency selection callbacks
	b.bot.Handle(&btnCurrencyUSD, b.handleCurrencySelection)
	b.bot.Handle(&btnCurrencyRUB, b.handleCurrencySelection)

	// Period selection callbacks
	b.bot.Handle(&btnPeriodWeek, b.handlePeriodSelection)
	b.bot.Handle(&btnPeriodMonth, b.handlePeriodSelection)
	b.bot.Handle(&btnPeriodYear, b.handlePeriodSelection)
	b.bot.Handle(&btnPeriodCustom, b.handlePeriodSelection)

	// Auto renewal callbacks
	b.bot.Handle(&btnAutoRenewalYes, b.handleAutoRenewalSelection)
	b.bot.Handle(&btnAutoRenewalNo, b.handleAutoRenewalSelection)

	// Action callbacks
	b.bot.Handle(&btnBack, b.handleBack)

	// Text message handler for states
	b.bot.Handle(telebot.OnText, b.handleTextMessage)

	// Register dynamic callback handlers after specific ones
	b.setupDynamicHandlers()
}

func (b *Bot) handleStart(c telebot.Context) error {
	return b.showMainMenu(c)
}

func (b *Bot) showMainMenu(c telebot.Context) error {
	text := "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

	return c.Send(text, &telebot.ReplyMarkup{
		InlineKeyboard: mainMenuKeyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleAddSubscription(c telebot.Context) error {
	userID := c.Sender().ID
	// Reset state but keep any existing data clean
	b.userStates[userID] = &UserState{
		State: StateAddingSubscription,
		Data:  make(map[string]interface{}),
	}

	text := "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: categoryKeyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleCategorySelection(c telebot.Context) error {
	userID := c.Sender().ID

	log.Printf("DEBUG: handleCategorySelection called for user %d with data: %s", userID, c.Data())

	var category models.Category
	switch c.Data() {
	case "cat_entertainment":
		category = models.CategoryEntertainment
	case "cat_work":
		category = models.CategoryWork
	case "cat_education":
		category = models.CategoryEducation
	case "cat_home":
		category = models.CategoryHome
	case "cat_other":
		category = models.CategoryOther
	}

	log.Printf("DEBUG: Setting category for user %d: %s", userID, category)
	b.setData(userID, "category", category)

	text := fmt.Sprintf("üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", getCategoryEmoji(category))

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: currencyKeyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleCurrencySelection(c telebot.Context) error {
	userID := c.Sender().ID

	var currency models.Currency
	currencyText := ""
	switch c.Data() {
	case "curr_usd":
		currency = models.CurrencyUSD
		currencyText = "üíµ USD"
	case "curr_rub":
		currency = models.CurrencyRUB
		currencyText = "üîπ RUB"
	}

	b.setData(userID, "currency", currency)

	category := b.getData(userID, "category").(models.Category)

	text := fmt.Sprintf("üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n‚úÖ –í–∞–ª—é—Ç–∞: %s\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã:",
		getCategoryEmoji(category), currencyText)

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: periodKeyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) handlePeriodSelection(c telebot.Context) error {
	userID := c.Sender().ID

	var periodDays int
	periodText := ""
	switch c.Data() {
	case "period_week":
		periodDays = 7
		periodText = "üóìÔ∏è –ù–µ–¥–µ–ª—è"
	case "period_month":
		periodDays = 30
		periodText = "üìÖ –ú–µ—Å—è—Ü"
	case "period_year":
		periodDays = 365
		periodText = "üìÜ –ì–æ–¥"
	case "period_custom":
		b.setState(userID, StateWaitingForDate)
		return c.Edit("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –ø–ª–∞—Ç–µ–∂–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14):", &telebot.ReplyMarkup{
			InlineKeyboard: backKeyboard,
		})
	}

	b.setData(userID, "period_days", periodDays)

	category := b.getData(userID, "category").(models.Category)
	currency := b.getData(userID, "currency").(models.Currency)
	currencyText := ""
	if currency == models.CurrencyUSD {
		currencyText = "üíµ USD"
	} else {
		currencyText = "üîπ RUB"
	}

	text := fmt.Sprintf("üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n‚úÖ –í–∞–ª—é—Ç–∞: %s\n‚úÖ –ü–µ—Ä–∏–æ–¥: %s\n\n–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?",
		getCategoryEmoji(category), currencyText, periodText)

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: autoRenewalKeyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleAutoRenewalSelection(c telebot.Context) error {
	userID := c.Sender().ID

	log.Printf("DEBUG: handleAutoRenewalSelection called for user %d with data: %s", userID, c.Data())

	// Check what data we have stored
	categoryData := b.getData(userID, "category")
	currencyData := b.getData(userID, "currency")
	periodData := b.getData(userID, "period_days")
	log.Printf("DEBUG: Current user data - category: %v, currency: %v, period: %v", categoryData, currencyData, periodData)

	autoRenewal := c.Data() == "auto_yes"
	autoRenewalText := "‚ùå –ù–µ—Ç"
	if autoRenewal {
		autoRenewalText = "‚úÖ –î–∞"
	}

	b.setData(userID, "auto_renewal", autoRenewal)
	b.setState(userID, StateWaitingForName)

	category := b.getData(userID, "category").(models.Category)
	currency := b.getData(userID, "currency").(models.Currency)

	periodDays := b.getData(userID, "period_days").(int)

	currencyText := ""
	periodText := ""
	if currency == models.CurrencyUSD {
		currencyText = "üíµ USD"
	} else {
		currencyText = "üîπ RUB"
	}

	switch periodDays {
	case 7:
		periodText = "üóìÔ∏è –ù–µ–¥–µ–ª—è"
	case 30:
		periodText = "üìÖ –ú–µ—Å—è—Ü"
	case 365:
		periodText = "üìÜ –ì–æ–¥"
	default:
		periodText = fmt.Sprintf("‚ö° %d –¥–Ω–µ–π", periodDays)
	}

	text := fmt.Sprintf("üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n‚úÖ –í–∞–ª—é—Ç–∞: %s\n‚úÖ –ü–µ—Ä–∏–æ–¥: %s\n‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: %s\n\nüí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:",
		getCategoryEmoji(category), currencyText, periodText, autoRenewalText)

	return c.Edit(text, &telebot.ReplyMarkup{
		InlineKeyboard: backKeyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleTextMessage(c telebot.Context) error {
	userID := c.Sender().ID
	state := b.getUserState(userID)

	switch state.State {
	case StateWaitingForName:
		return b.handleNameInput(c)
	case StateWaitingForCost:
		return b.handleCostInput(c)
	case StateWaitingForDate:
		return b.handleDateInput(c)
	default:
		return b.showMainMenu(c)
	}
}

func (b *Bot) handleNameInput(c telebot.Context) error {
	userID := c.Sender().ID
	name := strings.TrimSpace(c.Text())

	if name == "" {
		return c.Send("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
	}

	b.setData(userID, "name", name)
	b.setState(userID, StateWaitingForCost)

	currencyData := b.getData(userID, "currency")
	if currencyData == nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
	}
	currency := currencyData.(models.Currency)

	currencySymbol := "$"
	if currency == models.CurrencyRUB {
		currencySymbol = "‚ÇΩ"
	}

	return c.Send(fmt.Sprintf("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ %s (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.99):", currencySymbol))
}

func (b *Bot) handleCostInput(c telebot.Context) error {
	userID := c.Sender().ID
	costStr := strings.TrimSpace(c.Text())

	cost, err := models.ParseMoney(costStr)
	if err != nil || !cost.IsPositive() {
		return c.Send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.99):")
	}

	b.setData(userID, "cost", cost)

	// Create subscription
	return b.createSubscription(c)
}

func (b *Bot) handleDateInput(c telebot.Context) error {
	userID := c.Sender().ID
	daysStr := strings.TrimSpace(c.Text())

	days, err := strconv.Atoi(daysStr)
	if err != nil || days <= 0 {
		return c.Send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
	}

	b.setData(userID, "period_days", days)

	category := b.getData(userID, "category").(models.Category)
	currency := b.getData(userID, "currency").(models.Currency)
	currencyText := ""
	if currency == models.CurrencyUSD {
		currencyText = "üíµ USD"
	} else {
		currencyText = "üîπ RUB"
	}

	text := fmt.Sprintf("üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n‚úÖ –í–∞–ª—é—Ç–∞: %s\n‚úÖ –ü–µ—Ä–∏–æ–¥: ‚ö° %d –¥–Ω–µ–π\n\n–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?",
		getCategoryEmoji(category), currencyText, days)

	return c.Send(text, &telebot.ReplyMarkup{
		InlineKeyboard: autoRenewalKeyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) createSubscription(c telebot.Context) error {
	userID := c.Sender().ID

	// Safely extract data with validation
	nameData := b.getData(userID, "name")
	if nameData == nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∑–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
	}
	name := nameData.(string)

	costData := b.getData(userID, "cost")
	if costData == nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
	}
	cost := costData.(models.Money)

	currencyData := b.getData(userID, "currency")
	if currencyData == nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
	}
	currency := currencyData.(models.Currency)

	categoryData := b.getData(userID, "category")
	if categoryData == nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
	}
	category := categoryData.(models.Category)

	periodDaysData := b.getData(userID, "period_days")
	if periodDaysData == nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–∏–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
	}
	periodDays := periodDaysData.(int)

	autoRenewalData := b.getData(userID, "auto_renewal")
	if autoRenewalData == nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
	}
	autoRenewal := autoRenewalData.(bool)

	// Set next payment date (starting from today + period)
	nextPayment := time.Now().AddDate(0, 0, periodDays)

	req := &models.CreateSubscriptionRequest{
		Name:        name,
		Cost:        cost,
		Currency:    currency,
		PeriodDays:  periodDays,
		NextPayment: nextPayment,
		Category:    category,
		AutoRenewal: autoRenewal,
	}

	ctx := context.Background()
	subscription, err := b.subscriptionService.CreateSubscription(ctx, req)
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err))
	}

	// Clear user state
	b.clearUserState(userID)

	currencySymbol := "$"
	if currency == models.CurrencyRUB {
		currencySymbol = "‚ÇΩ"
	}

	periodText := ""
	switch periodDays {
	case 7:
		periodText = "–Ω–µ–¥–µ–ª—é"
	case 30:
		periodText = "–º–µ—Å—è—Ü"
	case 365:
		periodText = "–≥–æ–¥"
	default:
		periodText = fmt.Sprintf("%d –¥–Ω–µ–π", periodDays)
	}

	text := fmt.Sprintf("‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n"+
		"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n"+
		"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s%s\n"+
		"üìÖ –ü–µ—Ä–∏–æ–¥: –∫–∞–∂–¥—ã–µ %s\n"+
		"üóìÔ∏è –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: %s\n"+
		"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n"+
		"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: %s",
		subscription.Name,
		subscription.Cost.String(), currencySymbol,
		periodText,
		subscription.NextPayment.Format("02.01.2006"),
		getCategoryEmoji(category),
		getBoolEmoji(autoRenewal))

	return c.Send(text, &telebot.ReplyMarkup{
		InlineKeyboard: mainMenuKeyboard,
	}, telebot.ModeMarkdown)
}

func (b *Bot) handleBack(c telebot.Context) error {
	userID := c.Sender().ID
	b.clearUserState(userID)
	return b.showMainMenu(c)
}

func getCategoryEmoji(category models.Category) string {
	switch category {
	case models.CategoryEntertainment:
		return "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
	case models.CategoryWork:
		return "üíº –†–∞–±–æ—Ç–∞"
	case models.CategoryEducation:
		return "üìö –û–±—É—á–µ–Ω–∏–µ"
	case models.CategoryHome:
		return "üè† –î–æ–º"
	case models.CategoryOther:
		return "üì¶ –î—Ä—É–≥–æ–µ"
	default:
		return "üì¶ –î—Ä—É–≥–æ–µ"
	}
}

func getBoolEmoji(value bool) string {
	if value {
		return "‚úÖ –î–∞"
	}
	return "‚ùå –ù–µ—Ç"
}

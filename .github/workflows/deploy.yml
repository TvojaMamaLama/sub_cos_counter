name: Deploy Subscription Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && secrets.DEPLOY_HOST != ''
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check deployment secrets
      run: |
        if [ -z "${{ secrets.DEPLOY_HOST }}" ]; then
          echo "⚠️ DEPLOY_HOST secret not configured. Skipping deployment."
          echo "Please configure deployment secrets as described in CICD_SETUP.md"
          exit 0
        fi
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: ${{ secrets.DEPLOY_PORT || 22 }}
        script: |
          # Navigate to application directory
          cd ${{ secrets.DEPLOY_PATH || '/opt/subscription-bot' }}
          
          # Pull latest code
          git pull origin main
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop existing containers gracefully
          docker-compose -f deployment/docker/docker-compose.yml -f deployment/docker/docker-compose.prod.yml down --remove-orphans || true
          
          # Force remove conflicting containers if they exist
          docker rm -f subscription-bot-db subscription-bot subscription-bot-atlas 2>/dev/null || true
          
          # Remove conflicting networks
          docker network rm docker_subscription-bot-network 2>/dev/null || true
          
          # Create production docker-compose override to use registry image
          cat > deployment/docker/docker-compose.registry.yml << EOF
          services:
            bot:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              build: null
          EOF
          
          # Start services with registry image
          docker-compose -f deployment/docker/docker-compose.yml -f deployment/docker/docker-compose.prod.yml -f deployment/docker/docker-compose.registry.yml up -d
          
          # Wait for database to be ready
          sleep 15
          
          # Run migrations
          docker-compose -f deployment/docker/docker-compose.yml --profile migration run --rm atlas || echo "Migration completed or no changes"
          
          # Health check
          sleep 10
          docker-compose -f deployment/docker/docker-compose.yml ps
          
          # Show recent logs
          echo "Recent bot logs:"
          docker-compose -f deployment/docker/docker-compose.yml logs --tail=20 bot
          
          # Clean up old images
          docker image prune -f
          
          echo "✅ Deployment completed successfully!"

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deployment successful!"
        elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
          echo "⚠️ Deployment skipped - secrets not configured"
          echo "Configure deployment secrets as described in CICD_SETUP.md to enable auto-deployment"
        elif [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ Build successful! Docker image published to registry"
          echo "Configure deployment secrets to enable auto-deployment"
        else
          echo "❌ Build or deployment failed!"
          exit 1
        fi